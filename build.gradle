buildscript {
	ext.springBootVersion = 'latest.release'

	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath 'com.gorylenko.gradle-git-properties:gradle-git-properties:latest.release'
		classpath 'org.ajoberstar.grgit:grgit-gradle:latest.release'
	}
	configurations.classpath {
		resolutionStrategy.activateDependencyLocking()
	}
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.ajoberstar.grgit'

version = grgit ? "${grgit.head().abbreviatedId}.${Instant.now().epochSecond}" : (System.env.SOURCE_VERSION ?: '0.0.0-UNKNOWN')

sourceCompatibility = JavaVersion.VERSION_18
targetCompatibility = JavaVersion.VERSION_18

repositories {
	mavenCentral()
}
dependencies {
	implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.codehaus.groovy:groovy'
	implementation 'org.apache.httpcomponents:httpclient:latest.release'
	implementation 'org.apache.commons:commons-lang3:latest.release'
	implementation 'org.springdoc:springdoc-openapi-ui:latest.release'
	implementation 'org.springdoc:springdoc-openapi-groovy:latest.release'
}

dependencyLocking {
	lockAllConfigurations()
}

task resolveAndLockAll { // ./gradlew resolveAndLockAll --write-locks
	description = 'Resolves dependencies of all configurations and writes them into the lock file.'
	doFirst {
		assert gradle.startParameter.writeDependencyLocks : 'Execute resolveAndLockAll --write-locks'
	}
	doLast {
		configurations.findAll { it.canBeResolved }.each { it.resolve() }
	}
}

// Hack: Heroku removes the .git folder so gradle-git-properties fails, this task fakes the git.properties file
task generateGitPropertiesForHeroku(type: WriteProperties) {
	outputFile file("$buildDir/git.properties")
	properties([
			'git.branch': 'N/A',
			'git.commit.id.abbrev': System.env.SOURCE_VERSION ?: 'N/A',
			'git.commit.time': 'N/A'
	])
}

processResources {
	filesMatching('build.properties') { it.expand(project.properties) }
	from(generateGitPropertiesForHeroku)
}

jar {
	enabled = false
}

bootRun {
	systemProperties = System.properties
}

task bootDockerRun {
	dependsOn bootBuildImage
	doLast {
		"docker run --rm -p 8080:8080 $rootProject.name:$version".execute().waitForProcessOutput(System.out, System.err)
	}
}

task stage {
	dependsOn assemble
	doLast {
		file('Procfile').text = "web: java -Dserver.port=\$PORT -jar ${relativePath(bootJar.archiveFile)}"
	}
}

// Hack, see: generateGitPropertiesForHeroku task
gradle.taskGraph.whenReady { graph ->
	if (graph.hasTask(stage)) {
		generateGitProperties.enabled = false
	}
	else {
		generateGitPropertiesForHeroku.enabled = false
	}
}

springBoot {
	buildInfo()
}

wrapper {
	distributionType = Wrapper.DistributionType.BIN
	// gradleVersion = new groovy.json.JsonSlurper().parseText('https://services.gradle.org/versions/current'.toURL().text).version
}
