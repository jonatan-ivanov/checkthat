buildscript {
	ext.springBootVersion = 'latest.release'

	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
	}
	configurations.classpath {
		resolutionStrategy.activateDependencyLocking()
	}
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
	mavenCentral()
}
dependencies {
	implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.codehaus.groovy:groovy'
	implementation 'org.apache.httpcomponents:httpclient:4.+'
	implementation 'org.apache.commons:commons-lang3:3.+'
	implementation 'io.springfox:springfox-boot-starter:latest.release'
	implementation 'io.springfox:springfox-swagger-ui:latest.release'
}

dependencyLocking {
	lockAllConfigurations()
}

task resolveAndLockAll { // ./gradlew resolveAndLockAll --write-locks
	description = 'Resolves dependencies of all configurations and writes them into the lock file.'
	doFirst {
		assert gradle.startParameter.writeDependencyLocks : 'Execute resolveAndLockAll --write-locks'
	}
	doLast {
		configurations.findAll { it.canBeResolved }.each { it.resolve() }
	}
}

jar {
	enabled = false
}

bootRun {
	systemProperties = System.properties
}

task bootDockerRun {
	dependsOn bootBuildImage
	doLast {
		"docker run --rm -p 8080:8080 $rootProject.name:$version".execute().waitForProcessOutput(System.out, System.err)
	}
}

task stage {
	dependsOn assemble
	doLast {
		file('Procfile').text = "web: java -Dserver.port=\$PORT -jar ${relativePath(bootJar.archiveFile)}"
	}
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
	// gradleVersion = new groovy.json.JsonSlurper().parseText('https://services.gradle.org/versions/current'.toURL().text).version
}
